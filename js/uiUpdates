function updateTokenSelects() {
    const fromSelect = document.getElementById('fromToken');
    const toSelect = document.getElementById('toToken');

    Object.values(TOKENS).forEach(token => {
        const option = document.createElement('option');
        option.value = token.symbol;
        option.textContent = token.symbol;
        fromSelect.appendChild(option);
        toSelect.appendChild(option.cloneNode(true));
    });
}

function updateMinAmount() {
    const fromToken = TOKENS[document.getElementById('fromToken').value];
    const toToken = TOKENS[document.getElementById('toToken').value];
    const minAmount = calculateMinimumInputAmount(fromToken, toToken);
    document.getElementById('minAmount').textContent = `Minimum input: ${minAmount.toFixed(6)} ${fromToken.symbol} (including ${FEE_PERCENTAGE}% fee)`;
}

function updateAvailableLiquidity() {
    const toToken = TOKENS[document.getElementById('toToken').value];
    const availableLiquidity = liquidityPool[toToken.symbol] || 0;
    document.getElementById('availableLiquidity').textContent = `Available liquidity: ${availableLiquidity.toLocaleString()} ${toToken.symbol}`;
}

function updateEstimatedAmount() {
    const fromToken = TOKENS[document.getElementById('fromToken').value];
    const toToken = TOKENS[document.getElementById('toToken').value];
    const amount = parseFloat(document.getElementById('amount').value);
    if (!isNaN(amount)) {
        const estimated = calculateSwapAmount(fromToken, toToken, amount);
        document.getElementById('estimatedAmount').textContent = `Estimated amount: ${estimated.toFixed(6)} ${toToken.symbol}`;
    } else {
        document.getElementById('estimatedAmount').textContent = '';
    }
}
